#!/usr/bin/env python3
"""Update the CalVer string in a file with today's date."""

import re
import shlex
import sys
from datetime import date
from pathlib import Path, PurePath
from subprocess import CalledProcessError, run
from typing import Dict


def _run(args: str) -> Dict[str, str]:
    """Run a command with arguments.

    Args:
        args (str): A string of program arguments.

    Returns:
        Dict[str, str]: The program's stderr and stdout.
    """
    try:
        sp = run(shlex.split(args), capture_output=True)
        sp.check_returncode()
        outputs = {"stderr": sp.stderr, "stdout": sp.stdout}
        for stream, output in outputs.items():
            outputs[stream] = output.decode().rstrip()
        return outputs
    except CalledProcessError as e:
        print(e.stderr, file=sys.stderr)
        sys.exit(e.returncode)


def commit_count(since: str = "today") -> int:
    args = f"git rev-list origin/master --count --since '{since}'"
    outputs = _run(args)
    count = int(outputs["stdout"])
    return count


def git_add(pathspec: str) -> None:
    """Add file contents to the index.

    Args:
        pathspec (str): Files to add content from.

    """
    args = f"git add {pathspec}"
    _run(args)


def replace(file: str, pattern: str, replacement: str) -> bool:
    """Substitute a pattern in a file with a given replacement.

    Args:
        file (str): The file that will be operated on.
        pattern (str): The pattern that will be replaced.
        replacement (str): The substitute for the pattern.

    Returns:
        bool: False if there was an error updating the file, else True.

    """
    try:
        with open(file, "r+", newline="") as f:
            updated = re.sub(pattern, replacement, f.read())
            f.seek(0)
            f.write(updated)
            f.truncate()
    except OSError as e:
        name = PurePath(file).name
        print(f"error updating {name}: {str(e)}", file=sys.stderr)
        return False
    return True


def update_version(file: str) -> None:
    """Find a CalVer string in a file and replace it today's date.

    A micro-version will be added based on the number of commits made today.

    Args:
        file (str): The file that contains a CalVer string.

    See Also:
        https://calver.org/
 
    """
    pattern = r"\d{4}\.\d{1,2}\.\d{1,2}(.\d+)?"
    version = date.today().strftime(r"%Y.%-m.%-d")
    micro = commit_count(since="today")
    if micro:
        version += f".{micro}"
    if replace(file, pattern, version):
        git_add(file)


def main() -> None:
    p = Path(__file__)
    repo_dir = p.resolve().parents[1]
    module = repo_dir.stem
    update_version(repo_dir / module / "__init__.py")


if __name__ == "__main__":
    main()
